S0 ::= ''
S0 ::= If
S0 ::= For
S0 ::= While
S0 ::= Switch
S0 ::= type ( Tipo ) ; S0
S0 ::= print ( P ) ; S0
S0 ::= len ( LenOpt ) ; S0
S0 ::= A
If ::= if ( E ) { S0 } Else S0
Switch ::= switch ( E ) { Case } S0
For ::=  for ( id in Coleccion ) { S0 } S0
While ::= while ( E ) { S0 } S0
Case ::= case E : S0 B
B ::= ''
B ::= break ;
Case' ::= Case Case'
Else ::= else { S0 }
Else ::= ''
Coleccion ::= id
Coleccion ::= lista 
A ::= id = E ; S0
E ::= T E' 
E' ::= + T E'
E' ::= - T E'
E' ::= / T E'
E' ::= * T E'
E' ::= ** T E'
E' ::= % T E'
E' ::= < T E'
E' ::= > T E'
E' ::= <= T E'
E' ::= >= T E'
E' ::= == T E'
E' ::= != T E'
E' ::= in T E'
E' ::= not IN T E'
IN ::= ''
IN ::= in
E' ::= and T E'
E' ::= or T E'
E' ::= xor T E'
E' ::= ''
T ::= F
F ::= ( E )
F ::= id
F ::= string
F ::= bool
F ::= int
F ::= float
F ::= list
F ::= tuple
F ::= caracter
Tipo ::= id
Tipo ::= string
Tipo ::= bool
Tipo ::= int
Tipo ::= float
Tipo ::= list
Tipo ::= tuple
Tipo ::= caracter
LenOpt ::= string
LenOpt ::= list
LenOpt ::= tuple
LenOpt ::= id
P ::= Z Y 
Y ::= ''
Y ::= , Z Y
Z ::= F
